%option noyywrap

%{
#include <stdio.h>
#include <parser.tab.hh>

char *identifier_str;

extern int debug_lexer;

#define DECLARE_TOKEN(t) { if(debug_lexer) { fprintf(stderr, "%s ", #t + 6); } return t; }
%}

LOCAL_SYMBOL_H   [0-9][H]
LOCAL_SYMBOL_B   [0-9][B]
LOCAL_SYMBOL_F   [0-9][F]
IDENTIFIER       [A-Z0-9]{1,10}
ALF_STR          [Aa][Ll][Ff][ \t]+[A-Z0-9 ]{5}
NUMBER           [0-9]{1,10}
COMMENT          ^[*].*
WHITESPACE       [ \t]
NEWLINE          [\r\n]+

%%

NOP              DECLARE_TOKEN(TOKEN_OP_NOP)
ADD              DECLARE_TOKEN(TOKEN_OP_ADD)
FADD             DECLARE_TOKEN(TOKEN_OP_FADD)
SUB              DECLARE_TOKEN(TOKEN_OP_SUB)
FSUB             DECLARE_TOKEN(TOKEN_OP_FSUB)
MUL              DECLARE_TOKEN(TOKEN_OP_MUL)
FMUL             DECLARE_TOKEN(TOKEN_OP_FMUL)
DIV              DECLARE_TOKEN(TOKEN_OP_DIV)
FDIV             DECLARE_TOKEN(TOKEN_OP_FDIV)
NUM              DECLARE_TOKEN(TOKEN_OP_NUM)
CHAR             DECLARE_TOKEN(TOKEN_OP_CHAR)
HLT              DECLARE_TOKEN(TOKEN_OP_HLT)
SLA              DECLARE_TOKEN(TOKEN_OP_SLA)
SRA              DECLARE_TOKEN(TOKEN_OP_SRA)
SLAX             DECLARE_TOKEN(TOKEN_OP_SLAX)
SRAX             DECLARE_TOKEN(TOKEN_OP_SRAX)
SLC              DECLARE_TOKEN(TOKEN_OP_SLC)
SRC              DECLARE_TOKEN(TOKEN_OP_SRC)
MOVE             DECLARE_TOKEN(TOKEN_OP_MOVE)
LDA              DECLARE_TOKEN(TOKEN_OP_LDA)
LD1              DECLARE_TOKEN(TOKEN_OP_LD1)
LD2              DECLARE_TOKEN(TOKEN_OP_LD2)
LD3              DECLARE_TOKEN(TOKEN_OP_LD3)
LD4              DECLARE_TOKEN(TOKEN_OP_LD4)
LD5              DECLARE_TOKEN(TOKEN_OP_LD5)
LD6              DECLARE_TOKEN(TOKEN_OP_LD6)
LDX              DECLARE_TOKEN(TOKEN_OP_LDX)
LDAN             DECLARE_TOKEN(TOKEN_OP_LDAN)
LD1N             DECLARE_TOKEN(TOKEN_OP_LD1N)
LD2N             DECLARE_TOKEN(TOKEN_OP_LD2N)
LD3N             DECLARE_TOKEN(TOKEN_OP_LD3N)
LD4N             DECLARE_TOKEN(TOKEN_OP_LD4N)
LD5N             DECLARE_TOKEN(TOKEN_OP_LD5N)
LD6N             DECLARE_TOKEN(TOKEN_OP_LD6N)
LDXN             DECLARE_TOKEN(TOKEN_OP_LDXN)
STA              DECLARE_TOKEN(TOKEN_OP_STA)
ST1              DECLARE_TOKEN(TOKEN_OP_ST1)
ST2              DECLARE_TOKEN(TOKEN_OP_ST2)
ST3              DECLARE_TOKEN(TOKEN_OP_ST3)
ST4              DECLARE_TOKEN(TOKEN_OP_ST4)
ST5              DECLARE_TOKEN(TOKEN_OP_ST5)
ST6              DECLARE_TOKEN(TOKEN_OP_ST6)
STX              DECLARE_TOKEN(TOKEN_OP_STX)
STJ              DECLARE_TOKEN(TOKEN_OP_STJ)
STZ              DECLARE_TOKEN(TOKEN_OP_STZ)
JBUS             DECLARE_TOKEN(TOKEN_OP_JBUS)
IOC              DECLARE_TOKEN(TOKEN_OP_IOC)
IN               DECLARE_TOKEN(TOKEN_OP_IN)
OUT              DECLARE_TOKEN(TOKEN_OP_OUT)
JRED             DECLARE_TOKEN(TOKEN_OP_JRED)
JMP              DECLARE_TOKEN(TOKEN_OP_JMP)
JSJ              DECLARE_TOKEN(TOKEN_OP_JSJ)
JOV              DECLARE_TOKEN(TOKEN_OP_JOV)
JNOV             DECLARE_TOKEN(TOKEN_OP_JNOV)
JL               DECLARE_TOKEN(TOKEN_OP_JL)
JE               DECLARE_TOKEN(TOKEN_OP_JE)
JG               DECLARE_TOKEN(TOKEN_OP_JG)
JGE              DECLARE_TOKEN(TOKEN_OP_JGE)
JNE              DECLARE_TOKEN(TOKEN_OP_JNE)
JLE              DECLARE_TOKEN(TOKEN_OP_JLE)
JAN              DECLARE_TOKEN(TOKEN_OP_JAN)
JAZ              DECLARE_TOKEN(TOKEN_OP_JAZ)
JAP              DECLARE_TOKEN(TOKEN_OP_JAP)
JANN             DECLARE_TOKEN(TOKEN_OP_JANN)
JANZ             DECLARE_TOKEN(TOKEN_OP_JANZ)
JANP             DECLARE_TOKEN(TOKEN_OP_JANP)
J1N              DECLARE_TOKEN(TOKEN_OP_J1N)
J1Z              DECLARE_TOKEN(TOKEN_OP_J1Z)
J1P              DECLARE_TOKEN(TOKEN_OP_J1P)
J1NN             DECLARE_TOKEN(TOKEN_OP_J1NN)
J1NZ             DECLARE_TOKEN(TOKEN_OP_J1NZ)
J1NP             DECLARE_TOKEN(TOKEN_OP_J1NP)
J2N              DECLARE_TOKEN(TOKEN_OP_J1N)
J2Z              DECLARE_TOKEN(TOKEN_OP_J2Z)
J2P              DECLARE_TOKEN(TOKEN_OP_J2P)
J2NN             DECLARE_TOKEN(TOKEN_OP_J2NN)
J2NZ             DECLARE_TOKEN(TOKEN_OP_J2NZ)
J2NP             DECLARE_TOKEN(TOKEN_OP_J2NP)
J3N              DECLARE_TOKEN(TOKEN_OP_J3N)
J3Z              DECLARE_TOKEN(TOKEN_OP_J3Z)
J3P              DECLARE_TOKEN(TOKEN_OP_J3P)
J3NN             DECLARE_TOKEN(TOKEN_OP_J3NN)
J3NZ             DECLARE_TOKEN(TOKEN_OP_J3NZ)
J3NP             DECLARE_TOKEN(TOKEN_OP_J3NP)
J4N              DECLARE_TOKEN(TOKEN_OP_J4N)
J4Z              DECLARE_TOKEN(TOKEN_OP_J4Z)
J4P              DECLARE_TOKEN(TOKEN_OP_J4P)
J4NN             DECLARE_TOKEN(TOKEN_OP_J4NN)
J4NZ             DECLARE_TOKEN(TOKEN_OP_J4NZ)
J4NP             DECLARE_TOKEN(TOKEN_OP_J4NP)
J5N              DECLARE_TOKEN(TOKEN_OP_J5N)
J5Z              DECLARE_TOKEN(TOKEN_OP_J5Z)
J5P              DECLARE_TOKEN(TOKEN_OP_J5P)
J5NN             DECLARE_TOKEN(TOKEN_OP_J5NN)
J5NZ             DECLARE_TOKEN(TOKEN_OP_J5NZ)
J5NP             DECLARE_TOKEN(TOKEN_OP_J5NP)
J6N              DECLARE_TOKEN(TOKEN_OP_J6N)
J6Z              DECLARE_TOKEN(TOKEN_OP_J6Z)
J6P              DECLARE_TOKEN(TOKEN_OP_J6P)
J6NN             DECLARE_TOKEN(TOKEN_OP_J6NN)
J6NZ             DECLARE_TOKEN(TOKEN_OP_J6NZ)
J6NP             DECLARE_TOKEN(TOKEN_OP_J6NP)
JXN              DECLARE_TOKEN(TOKEN_OP_JXN)
JXZ              DECLARE_TOKEN(TOKEN_OP_JXZ)
JXP              DECLARE_TOKEN(TOKEN_OP_JXP)
JXNN             DECLARE_TOKEN(TOKEN_OP_JXNN)
JXNZ             DECLARE_TOKEN(TOKEN_OP_JXNZ)
JXNP             DECLARE_TOKEN(TOKEN_OP_JXNP)
INCA             DECLARE_TOKEN(TOKEN_OP_INCA)
DECA             DECLARE_TOKEN(TOKEN_OP_DECA)
ENTA             DECLARE_TOKEN(TOKEN_OP_ENTA)
ENNA             DECLARE_TOKEN(TOKEN_OP_ENNA)
INC1             DECLARE_TOKEN(TOKEN_OP_INC1)
DEC1             DECLARE_TOKEN(TOKEN_OP_DEC1)
ENT1             DECLARE_TOKEN(TOKEN_OP_ENT1)
ENN1             DECLARE_TOKEN(TOKEN_OP_ENN1)
INC2             DECLARE_TOKEN(TOKEN_OP_INC2)
DEC2             DECLARE_TOKEN(TOKEN_OP_DEC2)
ENT2             DECLARE_TOKEN(TOKEN_OP_ENT2)
ENN2             DECLARE_TOKEN(TOKEN_OP_ENN2)
INC3             DECLARE_TOKEN(TOKEN_OP_INC3)
DEC3             DECLARE_TOKEN(TOKEN_OP_DEC3)
ENT3             DECLARE_TOKEN(TOKEN_OP_ENT3)
ENN3             DECLARE_TOKEN(TOKEN_OP_ENN3)
INC4             DECLARE_TOKEN(TOKEN_OP_INC4)
DEC4             DECLARE_TOKEN(TOKEN_OP_DEC4)
ENT4             DECLARE_TOKEN(TOKEN_OP_ENT4)
ENN4             DECLARE_TOKEN(TOKEN_OP_ENN4)
INC5             DECLARE_TOKEN(TOKEN_OP_INC5)
DEC5             DECLARE_TOKEN(TOKEN_OP_DEC5)
ENT5             DECLARE_TOKEN(TOKEN_OP_ENT5)
ENN5             DECLARE_TOKEN(TOKEN_OP_ENN5)
INC6             DECLARE_TOKEN(TOKEN_OP_INC6)
DEC6             DECLARE_TOKEN(TOKEN_OP_DEC6)
ENT6             DECLARE_TOKEN(TOKEN_OP_ENT6)
ENN6             DECLARE_TOKEN(TOKEN_OP_ENN6)
INCX             DECLARE_TOKEN(TOKEN_OP_INCX)
DECX             DECLARE_TOKEN(TOKEN_OP_DECX)
ENTX             DECLARE_TOKEN(TOKEN_OP_ENTX)
ENNX             DECLARE_TOKEN(TOKEN_OP_ENNX)
CMPA             DECLARE_TOKEN(TOKEN_OP_CMPA)
FCMP             DECLARE_TOKEN(TOKEN_OP_FCMP)
CMP1             DECLARE_TOKEN(TOKEN_OP_CMP1)
CMP2             DECLARE_TOKEN(TOKEN_OP_CMP2)
CMP3             DECLARE_TOKEN(TOKEN_OP_CMP3)
CMP4             DECLARE_TOKEN(TOKEN_OP_CMP4)
CMP5             DECLARE_TOKEN(TOKEN_OP_CMP5)
CMP6             DECLARE_TOKEN(TOKEN_OP_CMP6)
CMPX             DECLARE_TOKEN(TOKEN_OP_CMPX)

EQU              DECLARE_TOKEN(TOKEN_EQU)
ORIG             DECLARE_TOKEN(TOKEN_ORIG)
CON              DECLARE_TOKEN(TOKEN_CON)
ALF              DECLARE_TOKEN(TOKEN_ALF)
END              DECLARE_TOKEN(TOKEN_END)

{WHITESPACE}     /* Do nothing */
{COMMENT}        /* Do nothing */
{NEWLINE}        { if(debug_lexer) { fprintf(stderr, "\n"); } }
{NUMBER}         DECLARE_TOKEN(TOKEN_NUMBER)
{LOCAL_SYMBOL_H} DECLARE_TOKEN(TOKEN_LOCAL_SYMBOL_H)
{LOCAL_SYMBOL_B} DECLARE_TOKEN(TOKEN_LOCAL_SYMBOL_B)
{LOCAL_SYMBOL_F} DECLARE_TOKEN(TOKEN_LOCAL_SYMBOL_F)
{IDENTIFIER}     DECLARE_TOKEN(TOKEN_IDENTIFIER)
{ALF_STR}        DECLARE_TOKEN(TOKEN_ALF_STR)

[(]              DECLARE_TOKEN(TOKEN_LPAREN)
[)]              DECLARE_TOKEN(TOKEN_RPAREN)
[=]              DECLARE_TOKEN(TOKEN_EQ)
[-]              DECLARE_TOKEN(TOKEN_MINUS)
[+]              DECLARE_TOKEN(TOKEN_PLUS)
[*]              DECLARE_TOKEN(TOKEN_MUL)
[/][/]           DECLARE_TOKEN(TOKEN_FRAC)
[/]              DECLARE_TOKEN(TOKEN_DIV)
[:]              DECLARE_TOKEN(TOKEN_RANGE)
[,]              DECLARE_TOKEN(TOKEN_COMMA)
